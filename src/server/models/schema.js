var mongoose = require('mongoose');

var score = {
    airway: String,
    albumin: String,
    baseExcess: String,
    bicarbonate: String,
    bilirubin: String,
    corrCalcium: String,
    creatinine: Number,
    currentAntibioticTherapyInWard: String,
    diastolicPressure: Number,
    durationOfAntibtioics: String,
    eyeOpening: Number,
    fiO2: String,
    glasgowComaScale: Number,
    glucose: Number,
    haematocrit: Number,
    hCO3: String,
    heartRate: Number,
    iNR: String,
    lactate: String,
    motorResponse: Number,
    notes: String,
    pCO2: String,
    pH: String,
    pO2: String,
    potassium: String,
    pupils: String,
    respiratoryRate: String,
    saturation: String,
    sedated: Boolean,
    sodium: String,
    systolicPressure: Number,
    temperature: Number,
    thrombolyticTherapy: String,
    scoreDate: Date,
    urea: String,
    urineOutput: String,
    ventilated: String,
    verbalResponse: Number,
    wBC: String
};

var admission = {
    admissionEntryDateTime: Date,
    admissionDateTime: Date,
    surgeryDateTime: Date,
    operativeDetails: String,
    operativeFindings: String,
    operationPerformed: String,
    operativePlan: String,
    durationOfOperation: String,
    anaesthesia: String,
    gradeOfLaryngoscopy: String,
    durationOfAnaesthesia: String,
    intraOperativeTotalVolumes: String,
    bloodLoss: String,
    urineOutput: String,
    crystalloidVolume: String,
    colloidVolume: String,
    packedCells: String,
    freezeDriedPlasma: String,
    platelets: String,
    cruoprecipitate: String,
    admittedFrom: String,
    numOfdaysInhospitalBeforeICU: String,
    admittingDoctor: String,
    admissionSummaryNotes:String,
    admittingConsultant: String,
    pastMedicalHistory: String,
    medications: String,
    airwayAndBreathing: String,
    circulation: String,
    renalAndElectrolytes: String,
    electrolytes: String,
    fluids: String,
    antibiotics: String,
    lines: String,
    analgesiaAndSedation: String,
    thrombosisManagement: String,
    ulcerProphylaxis: String,
    other: String,
    timeOfArrival: Date,
    pastSurgicalHistory: String,
    chronicMedication: String
};

var referral = {
    emergencyVsElective: String,
    referringHospital: String,
    referralHospital:String,
    icuRegistrar: String,
    icuConsultant: String,
    firstAdmittedDate: Date,
    referralDate: Date,
    entryTimeAndDate: Date,
    baseDisciplineReferring: String,
    timePatientSeenByICU: String,
    operativeStatusAtTimeOfReferral: String,
    baseDisciplineConsultant: String,
    referringDoctor: String,
    disciplineOfReferringDoctor: String,
    diagnosis: String,
    diagnosisDetails: String,
    patientLocation: String,
    levelOfCareRequired: String,
    reasonOfReferralToICU: String, // this is meant for reason for referral to the ICU.
    referralForComplicationOf: String,
    CurrentPatientLocation: String,
    numberOfDaysInHospital: String,
    patientCurrentlyVentilated: String,
    wasThisPatientInIcuInThePrevious48Hours: String,
    theFinalOutcomeOfThePatientIs: String,
    finalOutcome: String,
    outcomeEntryDateTime: Date,
    doctorFinalising: String,
    revisedScccm: String,
    ifAcceptedAnyDelay: String,
    delayReason: String,
    IfAcceptedButNeverAdmitted: String,
    unitTrasnferredToIfTrasnferred: String,
    sCCM: String,
    decision: String,
    decisionReason: String,
    plannedOperation: String,
    reasonForOperation: String,
    dateOperationPlanned: Date,
    comorbidities: [String],
    summaryNote: String,
    sccmScore: String,
    history: String,
    examination: String,
    managementPlan: String
};

var discharge = {
    status: String,
    dischargeDate: Date,
    comments: String
};

exports.patientSchema = mongoose.Schema({
    reference: String,
    hospital: String,
    firstName: String,
    lastName: String,
    birthDate: Date,
    gender: String,
    race: String,
    referral: referral,
    admission: admission,
    discharge: discharge,
    scores: [score]
});

exports.userSchema = mongoose.Schema({
    username: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    name: { type: String, required: true },
    hospital: { type: String, required: true }, // add this to every query (patient.hospital equals this hospital)
    role: String, // to be used with the admin authorisation
    passwordChange: String
});
